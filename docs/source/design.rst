Design
======

A brief description of the architecture of django-pg-timepart.

Partitioned Table Support
-------------------------

Currently Django does not support creating partitioned tables, so django-partitioning monkey patch ``create_model`` method in
``DatabaseSchemaEditor`` to make it generate SQL statements that create partitioned tables.

Some of the operations that Django applies to regular database tables may not be supported or even conflicted on the partitioned
table, eventually throwing a database exception. Therefore, it is recommended that you read the section on the partition table
in the official database documentation and refer to the relevant implementation inside Django.

Conflict Avoidance
------------------

It is important to note that if the field has the ``primary_key`` or ``unique`` attribute set, but it is not a partitioned field, we will ignore the
`PRIMARY KEY` or `UNIQUE` declarations for that field in the SQL statement generated by Django. Django itself ignores the ``db_index``
attribute of such fields, so you cannot use this method to create field indexes.

Tablespace
----------

django-partitioning will silently set the tablespace of all local partitioned indexes under one partition to be consistent with
the partition.

Partition Information
---------------------

django-partitioning persists partition configuration and state information with `PartitionConfig` and `PartitionLog`.
The problem with this is that once this information is inconsistent with the actual situation, django-partitioning
will not work properly, and you can only fix it manually.

Management
----------

You can use ``Model.partitioning.create_partition`` and ``Model.partitioning.detach_partition`` to automatically create and
archive partitions. In addition setting `default_detach_tablespace` and `default_attach_tablespace`, you can also use the
``set_tablespace`` method of the PartitionLog object to move the partition. See :doc:`api` for details.
